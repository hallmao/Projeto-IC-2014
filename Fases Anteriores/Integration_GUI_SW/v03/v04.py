#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3
# In conjunction with Tcl version 8.6
#    Jul 09, 2014 03:51:25 PM
import matplotlib.pyplot as plt
import matplotlib
from   math  import e 
from   numpy import array,sin,cos,exp
from   numpy import arange
###Funções renomeadas para facilitar digitação
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
import sys

##try:
from Tkinter import *
##except ImportError:
##    from tkinter import *

##try:
import ttk
##    py3 = 0
##except ImportError:
##    import tkinter.ttk as ttk
##    py3 = 1

import v03_support


#EDO ordem1
# a1*y´(t) + a0*(t)  = b0*x(t)

#1--eq homogenea
# a1*y´(t) + a0*y(t) = 0

#Equacao Caracteristica:
# a1*r + a0 = 0
#Raiz:
# r = -a0/a11

#1--Forma natural de resposta:
########Yfn(t) = C*e^(rt)*u(t) , onde r = -a0/a1

#Coeficientes da equação diferencial
#----------------------------------
##Variaveis de uso global



#------------------
t  = 0 # Variável no tempo


#----------------------------------

#2--Resposta natural:
#Condição inicial

##Raiz

##Precisão no log de saída :
precLog = 2

# Condiçãp inicial y(0) = d

# d = C*e^(-a0/a1)*0
# c = d
######## ynat(t) = d* e^(-a0/a1)*u(t)


#3--Resposta forçada :
# Entrada : x(t) = f*u(t)

#ypar(t) = k*u(t)

#ypar´(t) = 0

# a1*0 + a0*k = b0*f

# k = (b0*f)/a0

####### ypar(t) = [(bo*f)/a0] *u(t)

# yfor(t) = ytran(t) + ypar(t)

# yfor(t) = C*e^[(-a0/a1)*t] + (b0*f)/a0

##### yfor(t) =[-(b0*f)/a0]*e^[(-a0/a1)*t]*u(t) + [(b0*f)/a0]*u(t)

#zerando variaveis
a1 = 0
a0 = 0
b0 = 0.0
y0 = 0.0
r = 0.0

#4--Resposta Completa

# yc(t) = ynat(t) + yfor(t) =
# = d*e^[(-a0/a1)*t]  + (-b0/a0)*e^[(-a0/a1)*t] + (b0*f)/a0

### yc(t) = ( d- (b0*f)/a0)*e^[(-a0/a1)*t]
def parametros_entrada():
    flag_FdeX = True
   
    print "Entre com os coefs para uma EDO do tipo a1*(dy(t)/dt) + a0*y(t)  = b0*x(t)"

    #Entrada porca no console (só pra testes,claro !)
    ##Variavies agora säo de uso global
    global a1,a0,b0,y0,flag_FdeX,xT,r,xTcheck
    a1 = float(input("a1 = "))
    a0 = float(input("a0 = "))
    b0 = float(input("b0 = "))
    y0 = float(input("Condicao Inicial de y(0) =  "))
    print "Entrada x(t),favor inserir no formato e**(q*t),sin(q*t),cos(q*t),q*t,t**q onde q e uma cte:"
    flag_FdeX = True

      ##Flag para verificar se xT é uma f(x) ou uma cte (degrau, impulso)

    #xTcheck = 0.0
    ##Checando xT, verificando se é uma função em x ou impulso

    ##Tente converter x(t) pra float, só funciona se
    #o mesmo for uma constante, do contrario, ignore



    if b0 != 0 :
        xT = raw_input("x(t) = ")

    else:
        xT = 0


    try:
        xTcheck = float(xT)
        #print  type(xTcheck)
        #print  xT,xTcheck
        flag_FdeX = False
    except:
        pass
    ###Resposta natural
    r = -(a0/a1) ## Raiz da eq
    #Forma Natural




parametros_entrada()
print a0,a1,b0,y0,r

    
#print xTcheck    



###1--Homogenea

#1--eq homogenea
# a1*y´(t) + a0*y(t) = 0

#Equacao Caracteristica:
# a1*r + a0 = 0
#Raiz:
# r = -a0/a1

#1--Forma natural de resposta:
########Yfn(t) = C*e^(rt)*u(t) , onde r = -a0/a1

##Conds Iniciais
# d = C*e^(-a0/a1)*0
# c = d
######## ynat(t) = d* e^(-a0/a1)*u(t)


#-------------------Resolucao---------------------







def log_print():
    print "\nRelatorio"
    print "Equacao diferencial-->\n"
    print str(a1)+"*(dy(t)/dt) "+str(a0)+"*y(t) " + "= "+str(b0)+"*("+str(xT)+")\n"
    print "Raiz(es) da equacao = " + str(round(r,precLog))
    print "Forma natural da resposta:\n"+"yfn(t)= " + "C*e^("+str(round(r,precLog))+"t)*u(t)"
##Resposta forma natural com conds iniciais
    print "\nResposta natural:\n"+"ynat(t)= " +str(round(y0,precLog))+"*e^("+str(round(r,precLog))+"t)*u(t)"
    ##Resposta completa
    if b0 == 0:
        print "\nResposta completa : yc(t) = ynat(t) + yfor(t)"
        print "yc(t) = ("+str(round(y0,precLog))+"*"+"e^("+str(round(r,precLog))+"t)*u(t)"

        return ("Relatorio"+"\nEquacao diferencial:"+str(a1)+"*(dy(t)/dt) "+str(a0)+"*y(t) "
                "= "+str(b0)+"*("+str(xT)+")\n"+"Raiz(es) da equacao = " + str(round(r,precLog))+
                "\nForma natural da resposta:\n"+"yfn(t)= " + "C*e^("+str(round(r,precLog))+"t)*u(t)"+
                "\nResposta natural:\n"+"ynat(t)= " +str(round(y0,precLog))+"*e^("+str(round(r,precLog))+"t)*u(t)"+
                "\nResposta completa : yc(t) = ynat(t) + yfor(t)"+
                "\nyc(t) = ("+str(round(y0,precLog))+"*"+"e^("+str(round(r,precLog))+"t)*u(t)")
                
                
                
                
    
    if b0 != 0:
        print "\nResposta forcada"
        print "ypart(t) ="+str(round(b0/a0,precLog))+"*("+xT+")*u(t)"
        ##ytran(t)
        print "ytran(t) = "+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t)"
        ## Yforçada(t)
        print "yfor(t) = ytran(t) + ypart(t)"
        print "yfor(t) = "+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t) + "+str(round(b0/a0,2))+"*"+xT+"*u(t)"
        ###Resposta completa
        print "\nResposta completa : yc(t) = ynat(t) + yfor(t)"
        print "yc(t) = ("+str(round(y0,precLog))+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t) + "+str(round(b0/a0,precLog))+"*"+xT+"*u(t)"
        
        return ("Relatorio"+"\nEquacao diferencial:"+str(a1)+"*(dy(t)/dt) "+str(a0)+"*y(t) "
                "= "+str(b0)+"*("+str(xT)+")\n"+"Raiz(es) da equacao = " + str(round(r,precLog))+
                "\nForma natural da resposta:\n"+"yfn(t)= " + "C*e^("+str(round(r,precLog))+"t)*u(t)"+
                "\nResposta natural:\n"+"ynat(t)= " +str(round(y0,precLog))+"*e^("+str(round(r,precLog))+"t)*u(t)"+
                "\nResposta forcada:\n"+"ypart(t) ="+str(round(b0/a0,precLog))+"*("+xT+")*u(t)"+
                "\nytran(t) = "+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t)"+
                "\nyfor(t) = ytran(t) + ypart(t)"+"yfor(t) = "+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t) + "+str(round(b0/a0,2))+"*"+xT+"*u(t)"+
                "\nResposta completa : yc(t) = ynat(t) + yfor(t)"+
                "\nyc(t) = ("+str(round(y0,precLog))+str(round(-b0/a0,precLog))+"*("+xT+")*e^("+str(round(r,precLog))+"t)*u(t) + "+str(round(b0/a0,precLog))+"*"+xT+"*u(t)")
                

    
#Print

log_print()


def plot_and_show():

    #Plot resposta natural:

    # t variable adjusting
    ###Ideia futura, t ajustável pelo Usuário !!
    t       = arange(0.0,20.0,0.01)

 ## Defining general font size
 ##  
    font = {'family' : 'arial',
        'weight' : 'normal',
        'size'   : 8}

    plt.rc('font', **font)
    

    #Plot resposta natural
    
    plotNat = y0*e**(r*t)
    ##Nome da Janela dos graficos
    outAllPlots =    plt.figure("EDOs a coeficientes constantes")
    plt.subplot(333)
    #plt.figure("Resposta Natural ynat(t)")
    plt.title("ynat(t)")
    plt.xlabel("Tempo t")
    plt.ylabel("Amplitude")
    RespNatplot= plt.plot(t,plotNat,lw = 2)
    plt.ylim(-abs(y0+1),abs(y0+1))


    ##Plot das raizes (nesse caso só uma)

    plotRaizes = r
    plt.subplot(334)
    plt.title("Raizes")
    plt.xlabel("X axis")
    plt.ylabel("Y axis")
    respRaizesPlot = plt.plot(r,'x')



    if b0!= 0 and flag_FdeX : ## Para x(t) funcao de t


            ###Plot x(t)
        plotXt = eval(xT)
        plt.subplot(3,3,1)
        plt.title("x(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        funcXplot = plt.plot(t,plotXt, lw = 2)
        

       
        #Plot Resposta Particular
        plotPart = (b0/a0)* eval(xT)
        #plt.figure("Resposta Particular ypart(t)")
        plt.subplot(332)
        plt.title("ypart(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespPartPlot= plt.plot(t,plotPart,lw = 2)
        #plt.ylim(-abs((b0/a0)+1),abs((b0/a0)+1))


        #Plot Resposta Transitoria
        #print "ytran(t) = "+str((-b0/a0))+"*("+xT+")*e^("+str(r)+"t)*u(t)"
 
        plotTran = (-b0/a0)*eval(xT)*(e**r)
        plt.subplot(335)
        #plt.figure("Resposta Transitoria ytran(t)")
        plt.title("ytran(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespTranPlot= plt.plot(t,plotTran,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))

        ##Plot Resposta Forçada
        ##print "yfor(t) = ytran(t) + ypart(t)"
        plotFor = (-b0/a0)*eval(xT)*(e**r) + (b0/a0)*eval(xT)
        plt.subplot(3,3,8)
        #plt.figure("Resposta Forcada yfor(t)")
        plt.title("yfor(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespForPlot= plt.plot(t,plotFor,lw = 2)
        ##Plotting on 2 distinct places
        plt.subplot(3,3,6)
        plt.title("yfor(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespForPlot= plt.plot(t,plotFor,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))
        
        ##Plot Resposta Completa
        ##print "\nResposta completa : yc(t) = ynat(t) + yfor(t)"
        plotCom = y0*e**(r*t) + ((-b0/a0)*eval(xT)*(e**r)) + (b0/a0)*eval(xT)
        plt.subplot(339)
        #plt.figure("Resposta Completa yc(t)")
        plt.title("yc(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespComPlot= plt.plot(t,plotCom,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))
        
    else: # Para x(t) constante ou funcao degrau/impulso

        ## Nosso t precisa ser multiplicado por essa constant,
        # t deixa de ser um escalar e vira um vetor
            # print xTcheck
        t=t*xTcheck
        #print type(t),t

            ###Plot x(t)
        plotXt = t
        plt.subplot(3,3,1)
        plt.title("x(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        funcXplot = plt.plot(t,plotXt, lw = 2)


        
    
        #Plot Resposta Particular
        plotPart = (b0/a0)*t
        plt.subplot(332)
        #plt.figure("Resposta Particular ypart(t)")
        plt.title("ypart(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespPartPlot= plt.plot(t,plotPart,lw = 2)
        #plt.ylim(-abs((b0/a0)+1),abs((b0/a0)+1))


        #Plot Resposta Transitoria
        #print "ytran(t) = "+str((-b0/a0))+"*("+xT+")*e^("+str(r)+"t)*u(t)"

        plotTran = (-b0/a0)*t*(e**r)
        plt.subplot(335)
        #plt.figure("Resposta Transitoria ytran(t)")
        plt.title("ytran(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespTranPlot= plt.plot(t,plotTran,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))

        ##Plot Resposta Forçada
        ##print "yfor(t) = ytran(t) + ypart(t)"
        plotFor = (-b0/a0)*t*(e**r) + (b0/a0)*t
        plt.subplot(338)
        #plt.figure("Resposta Forcada yfor(t)")
        plt.title("yfor(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespForPlot= plt.plot(t,plotFor,lw = 2)
        plt.subplot(336)
        #plt.figure("Resposta Forcada yfor(t)")
        plt.title("yfor(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespForPlot= plt.plot(t,plotFor,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))
        
        ##Plot Resposta Completa
        ##print "\nResposta completa : yc(t) = ynat(t) + yfor(t)"
        plotCom = y0*e**(r*t) + ((-b0/a0)*t*(e**r)) + (b0/a0)*t
        plt.subplot(339)
        #plt.figure("Resposta Completa yc(t)")
        plt.title("yc(t)")
        plt.xlabel("Tempo t")
        plt.ylabel("Amplitude")
        RespComPlot= plt.plot(t,plotCom,lw = 2)
        #plt.ylim(-abs((b0/a0)+5),abs((b0/a0)+5))

    ##Manual Plot spacing
    plt.subplots_adjust(left=0.07, bottom=0.13, right=0.97, top=0.91,
                wspace=0.21, hspace=0.78)

  

    return outAllPlots


###GUI START

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('EDO_Solver')
    root.geometry('800x600+131+118')
    w = EDO_Solver (root)
    v03_support.init(root, w)
    root.mainloop()

w = None
def create_EDO_Solver (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('EDO_Solver')
    w.geometry('800x600+131+118')
    ##Main window is not resizable anymore
    root.resizable(width = FALSE, height= FALSE)
    w_win = EDO_Solver (w)
    v03_support.init(w, w_win, param)
    return w_win

def destroy_EDO_Solver ():
    global w
    w.destroy()
    w = None


class EDO_Solver:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.EDO_viewer = Label (master)
        self.EDO_viewer.place(relx=0.0,rely=0.0,height=100,width=800)
        self.EDO_viewer.configure(activebackground="#f9f9f9")
        self.EDO_viewer.configure(activeforeground="black")
        self.EDO_viewer.configure(background=_bgcolor)
        self.EDO_viewer.configure(borderwidth="5")
        self.EDO_viewer.configure(foreground="#000000")
        self.EDO_viewer.configure(highlightbackground="#d9d9d9")
        self.EDO_viewer.configure(highlightcolor="black")
        self.EDO_viewer.configure(relief=RIDGE)
        self.EDO_viewer.configure(text='''Diff Equation Here''')
        self.EDO_viewer.configure(width=800)

        self.Label2 = Label (master)
        self.Label2.place(relx=0.0,rely=0.17,height=82,width=310)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#f7f7f7")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(relief=RIDGE)
        self.Label2.configure(text='''Init.Conditions''')

        self.Label3 = Label (master)
        self.Label3.place(relx=0.39,rely=0.17,height=82,width=490)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief=RIDGE)
        self.Label3.configure(text='''Input x(t)''')

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.idioma = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.idioma,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Idioma")
        self.idioma.add_radiobutton(
                value="Espanhol",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Espanhol")
        self.idioma.add_radiobutton(
                value="Inglês",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Inglês")
        self.idioma.add_radiobutton(
                value="Português",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Português")
        self.notacao = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.notacao,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Notacao")
        self.notacao.add_radiobutton(
                value="Linha",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Linha")
        self.notacao.add_radiobutton(
                value="Leibniz",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Leibniz")
        self.notacao.add_radiobutton(
                value="Newton",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Newton")
        self.notacao.add_radiobutton(
                value="Heavside",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="Heavside")
        self.digitosfracionarios = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.digitosfracionarios,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="DigitosFracionarios")
        self.digitosfracionarios.add_radiobutton(
                value="2 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="2 digitos")
        self.digitosfracionarios.add_radiobutton(
                value="3 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="3 digitos")
        self.digitosfracionarios.add_radiobutton(
                value="4 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v03_support.TODO,
                foreground="#000000",
                label="4 digitos")


        self.style.configure('TNotebook.Tab',background=_bgcolor)
        self.style.configure('TNotebook.Tab',foreground=_fgcolor)
        self.style.map('TNotebook.Tab',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.Abas = ttk.Notebook(master)
        self.Abas.place(relx=0.0,rely=0.32,relheight=0.62,relwidth=1.0)
        self.Abas.configure(width=804)
        self.Abas.configure(takefocus="")
        self.Abas_pg0 = ttk.Frame(self.Abas)
        self.Abas.add(self.Abas_pg0, padding=3)
        self.Abas.tab(0, text="Relatorio",underline="-1",)
        self.Abas_pg1 = ttk.Frame(self.Abas)
        self.Abas.add(self.Abas_pg1, padding=3)
        self.Abas.tab(1, text="Gráfico",underline="-1",)

        self.Output_relatorio = Message (self.Abas_pg0)
        self.Output_relatorio.place(relx=0.0,rely=0.0,relheight=1.01
                ,relwidth=1.0)
        self.Output_relatorio.configure(background="white")
        self.Output_relatorio.configure(foreground="#000000")
        self.Output_relatorio.configure(highlightbackground="#d9d9d9")
        self.Output_relatorio.configure(highlightcolor="black")
        self.Output_relatorio.configure(width=747)
        ##Saida com o logo e respostas
        self.Output_relatorio.configure(text = log_print(),anchor = NW)

        self.output_plots = Frame (self.Abas_pg1)
        self.output_plots.place(relx=0.0,rely=0.0,relheight=1.02,relwidth=1.01)
        self.output_plots.configure(relief=GROOVE)
        self.output_plots.configure(borderwidth="2")
        self.output_plots.configure(relief=GROOVE)
        self.output_plots.configure(background="White")
        self.output_plots.configure(width=755)
        ###Saida dos gráficos na GUI
        canvas = FigureCanvasTkAgg(plot_and_show(),self.output_plots)
        canvas.show()
        canvas.get_tk_widget().pack(side = TOP , fill = BOTH, expand = 1 )
        


        self.plotOptions_frame = Frame (master)
        self.plotOptions_frame.place(relx=0.0,rely=0.93,relheight=0.11,relwidth=1.01)
        self.plotOptions_frame.configure(relief=RIDGE)
        self.plotOptions_frame.configure(borderwidth="3")
        self.plotOptions_frame.configure(relief=RIDGE)
        self.plotOptions_frame.configure(background="white")
        self.plotOptions_frame.configure(highlightbackground="#d9d9d9")
        self.plotOptions_frame.configure(highlightcolor="black")
        self.plotOptions_frame.configure(width=805)
        ###Barra de opçoes do plot
        toolbar = NavigationToolbar2TkAgg(canvas,self.plotOptions_frame)
        toolbar.pack(side = TOP, fill = Y)

        
        



if __name__ == '__main__':
    vp_start_gui()


