#############################################################################
# Generated by PAGE version 4.3
# in conjunction with Tcl version 8.6
#    Jul 07, 2014 07:05:17 PM




#############################################################################
## vTcl Code to Load Stock Images


if {![info exist vTcl(sourcing)]} {
#############################################################################
## Procedure:  vTcl:rename

proc ::vTcl:rename {name} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    regsub -all "\\." $name "_" ret
    regsub -all "\\-" $ret "_" ret
    regsub -all " " $ret "_" ret
    regsub -all "/" $ret "__" ret
    regsub -all "::" $ret "__" ret

    return [string tolower $ret]
}

#############################################################################
## Procedure:  vTcl:image:create_new_image

proc ::vTcl:image:create_new_image {filename {description {no description}} {type {}} {data {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    # Does the image already exist?
    if {[info exists ::vTcl(images,files)]} {
        if {[lsearch -exact $::vTcl(images,files) $filename] > -1} { return }
    }
    if {![info exists ::vTcl(sourcing)] && [string length $data] > 0} {
        set object [image create  [vTcl:image:get_creation_type $filename]  -data $data]
    } else {
        # Wait a minute... Does the file actually exist?
        if {! [file exists $filename] } {
            # Try current directory
            set script [file dirname [info script]]
            set filename [file join $script [file tail $filename] ]
        }

        if {![file exists $filename]} {
            set description "file not found!"
            ## will add 'broken image' again when img is fixed, for
            ## now create empty
            set object [image create photo -width 1 -height 1]
        } else {
            set object [image create  [vTcl:image:get_creation_type $filename]  -file $filename]
        }
    }

    set reference [vTcl:rename $filename]
    set ::vTcl(images,$reference,image)       $object
    set ::vTcl(images,$reference,description) $description
    set ::vTcl(images,$reference,type)        $type
    set ::vTcl(images,filename,$object)       $filename

    lappend ::vTcl(images,files) $filename
    lappend ::vTcl(images,$type) $object
    set ::vTcl(imagefile,$object) $filename   ;# Rozen
    # return image name in case caller might want it
    return $object
}

#############################################################################
## Procedure:  vTcl:image:get_image

proc ::vTcl:image:get_image {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    set reference [vTcl:rename $filename]

    # Let's do some checking first
    if {![info exists ::vTcl(images,$reference,image)]} {
        # Well, the path may be wrong; in that case check
        # only the filename instead, without the path.

        set imageTail [file tail $filename]

        foreach oneFile $::vTcl(images,files) {
            if {[file tail $oneFile] == $imageTail} {
                set reference [vTcl:rename $oneFile]
                break
            }
        }
    }
    # Rozen. There follows a hack in case one wants to rerun a tcl
    # file which contains a file name where an image is expected.
    if {![info exists ::vTcl(images,$reference,image)]} {
        set ::vTcl(images,$reference,image)  [vTcl:image:create_new_image $filename]
    }
    return $::vTcl(images,$reference,image)
}

#############################################################################
## Procedure:  vTcl:image:get_creation_type

proc ::vTcl:image:get_creation_type {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    switch [string tolower [file extension $filename]] {
        .ppm -
        .jpg -
        .bmp -
        .gif    {return photo}
        .xbm    {return bitmap}
        default {return photo}
    }
}

foreach img {


            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

}
#############################################################################
## vTcl Code to Load User Images

catch {package require Img}

foreach img {

        {{$[pwd]/images/Leibniz_order2_notation.gif} {user image} user {}}

            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

set vTcl(actual_gui_bg) #d9d9d9
set vTcl(actual_gui_fg) #000000
set vTcl(actual_gui_menu_bg) #d9d9d9
set vTcl(actual_gui_menu_fg) #000000
set vTcl(complement_color) #d9d9d9
set vTcl(analog_color_p) #d9d9d9
set vTcl(analog_color_m) #d9d9d9
set vTcl(active_fg) #111111
#################################
#LIBRARY PROCEDURES
#


if {[info exists vTcl(sourcing)]} {

proc vTcl:project:info {} {
    set base .top36
    namespace eval ::widgets::$base {
        set set,origin 1
        set set,size 1
        set runvisible 1
    }
    set site_3_0 $base.m41
    set site_3_0 $base.m41
    set site_3_0 $base.m41
    set site_3_0 $base.tLa58
    set site_3_0 $base.tLa61
    namespace eval ::widgets_bindings {
        set tagslist _TopLevel
    }
    namespace eval ::vTcl::modules::main {
        set procs {
        }
        set compounds {
        }
        set projectType single
    }
}
}

#################################
# USER DEFINED PROCEDURES
#

#################################
# GENERATED GUI PROCEDURES
#

proc vTclWindow. {base} {
    if {$base == ""} {
        set base .
    }
    ###################
    # CREATING WIDGETS
    ###################
    wm focusmodel $top passive
    wm geometry $top 1x1+5+27; update
    wm maxsize $top 3200 1036
    wm minsize $top 72 15
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm withdraw $top
    wm title $top "page.tcl"
    bindtags $top "$top Page.tcl all"
    ###################
    # SETTING GEOMETRY
    ###################

    vTcl:FireEvent $base <<Ready>>
}

proc vTclWindow.top36 {base} {
    if {$base == ""} {
        set base .top36
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl:toplevel $top -class Toplevel \
        -menu "$top.m41" -background {#d9d9d9} -highlightbackground {#d9d9d9} \
        -highlightcolor black 
    wm focusmodel $top passive
    wm geometry $top 800x600+1778+296; update
    wm maxsize $top 1280 703
    wm minsize $top 72 1
    wm overrideredirect $top 0
    wm resizable $top 0 0
    wm title $top "EDO_Solver"
    vTcl:DefineAlias "$top" "EDO_mainWindow" vTcl:Toplevel:WidgetProc "" 1
    bindtags $top "$top Toplevel all _TopLevel"
    menu $top.m41 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -font TkMenuFont -foreground {#000000} \
        -tearoff 0 
    $top.m41 add cascade \
        -menu "$top.m41.men42" -activebackground {#d9d9d9} \
        -activeforeground {#111111} -background {#d9d9d9} -font TkMenuFont \
        -foreground {#000000} -label Idiomas 
    set site_3_0 $top.m41
    menu $site_3_0.men42 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men42 add radiobutton \
        -value EN -activebackground {#d9d9d9} -activeforeground {#000000} \
        -background {#d9d9d9} -command TODO -font TkMenuFont \
        -foreground {#000000} -label English 
    $site_3_0.men42 add radiobutton \
        -value ES -activebackground {#d9d9d9} -activeforeground {#000000} \
        -background {#d9d9d9} -command TODO -font TkMenuFont \
        -foreground {#000000} -label Español 
    $site_3_0.men42 add radiobutton \
        -value PT -activebackground {#d9d9d9} -activeforeground {#000000} \
        -background {#d9d9d9} -command TODO -font TkMenuFont \
        -foreground {#000000} -label Português 
    $top.m41 add cascade \
        -menu "$top.m41.men43" -activebackground {#d9d9d9} \
        -activeforeground {#111111} -background {#d9d9d9} -font TkMenuFont \
        -foreground {#000000} -label Notação 
    set site_3_0 $top.m41
    menu $site_3_0.men43 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men43 add radiobutton \
        -value Newton -activebackground {#d9d9d9} -activeforeground {#000000} \
        -background {#d9d9d9} -command TODO -font TkMenuFont \
        -foreground {#000000} -label Newton 
    $site_3_0.men43 add radiobutton \
        -value Leibniz -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Leibniz 
    $site_3_0.men43 add radiobutton \
        -value Heavside -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Heavside 
    $site_3_0.men43 add radiobutton \
        -value Linha -activebackground {#d9d9d9} -activeforeground {#000000} \
        -background {#d9d9d9} -command TODO -font TkMenuFont \
        -foreground {#000000} -label Linha 
    $top.m41 add cascade \
        -menu "$top.m41.men44" -activebackground {#d9d9d9} \
        -activeforeground {#111111} -background {#d9d9d9} -font TkMenuFont \
        -foreground {#000000} -label {Digitos Fracionários} 
    set site_3_0 $top.m41
    menu $site_3_0.men44 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men44 add radiobutton \
        -value {2 Digitos} -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {2 Digitos} 
    $site_3_0.men44 add radiobutton \
        -value {3 Digitos} -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {3 Digitos} 
    $site_3_0.men44 add radiobutton \
        -value {4 Digitos} -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {4 Digitos} 
    ttk::label $top.tLa53 \
        -background {#d9d9d9} -foreground {#000000} -borderwidth 2 \
        -relief sunken -takefocus 0 -text Image -width 800 \
        -image [vTcl:image:get_image [file join / Users Michael Desktop {Projeto IC 2014} Python_GUI_Tutorial v03 images Leibniz_order2_notation.gif]] \
        -compound top 
    vTcl:DefineAlias "$top.tLa53" "TLabel1" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::entry $top.tLa53.tEn54 \
        -textvariable 0 -foreground {} -background {} -takefocus {} \
        -cursor ibeam 
    vTcl:DefineAlias "$top.tLa53.tEn54" "a0_c" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::entry $top.tLa53.tEn55 \
        -textvariable 0 -foreground {} -background {} -takefocus {} \
        -cursor ibeam 
    vTcl:DefineAlias "$top.tLa53.tEn55" "a1_c" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::entry $top.tLa53.tEn56 \
        -textvariable 0 -foreground {} -background {} -takefocus {} \
        -cursor ibeam 
    vTcl:DefineAlias "$top.tLa53.tEn56" "a2_c" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::entry $top.tEn57 \
        -foreground {} -background {} -takefocus {} -cursor ibeam 
    vTcl:DefineAlias "$top.tEn57" "TEntry4" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::style configure TLabelframe.Label -background #d9d9d9
    ttk::style configure TLabelframe.Label -foreground #000000
    ttk::style configure TLabelframe.Label -font TkDefaultFont
    ttk::style configure TLabelframe -background #d9d9d9
    ttk::labelframe $top.tLa58 \
        -text {Condições Iniciais : y'(0) =               y(0) =} \
        -relief sunken -width 340 -height 35 -takefocus 0 
    vTcl:DefineAlias "$top.tLa58" "conds_inics_frame" vTcl:WidgetProc "EDO_mainWindow" 1
    set site_3_0 $top.tLa58
    ttk::entry $site_3_0.tEn59 \
        -foreground {} -background {} -takefocus {} -cursor ibeam 
    vTcl:DefineAlias "$site_3_0.tEn59" "ylinhainit_entrada" vTcl:WidgetProc "EDO_mainWindow" 1
    ttk::entry $site_3_0.tEn60 \
        -foreground {} -background {} -takefocus {} -cursor ibeam 
    vTcl:DefineAlias "$site_3_0.tEn60" "yinit_entrada" vTcl:WidgetProc "EDO_mainWindow" 1
    place $site_3_0.tEn59 \
        -in $site_3_0 -x 190 -y 0 -width 40 -height 26 -anchor nw \
        -bordermode ignore 
    place $site_3_0.tEn60 \
        -in $site_3_0 -x 290 -y 0 -width 40 -height 26 -anchor nw \
        -bordermode ignore 
    ttk::style configure TLabelframe.Label -background #d9d9d9
    ttk::style configure TLabelframe.Label -foreground #000000
    ttk::style configure TLabelframe.Label -font TkDefaultFont
    ttk::style configure TLabelframe -background #d9d9d9
    ttk::labelframe $top.tLa61 \
        -text {Entrada x(t) = } -width 460 -height 35 -takefocus 0 
    vTcl:DefineAlias "$top.tLa61" "entradaxT_frame" vTcl:WidgetProc "EDO_mainWindow" 1
    set site_3_0 $top.tLa61
    ttk::entry $site_3_0.tEn62 \
        -textvariable 0 -foreground {} -background {} -takefocus {} \
        -cursor ibeam 
    vTcl:DefineAlias "$site_3_0.tEn62" "entrada_xT" vTcl:WidgetProc "EDO_mainWindow" 1
    place $site_3_0.tEn62 \
        -in $site_3_0 -x 100 -y 0 -width 360 -height 36 -anchor nw \
        -bordermode ignore 
    ###################
    # SETTING GEOMETRY
    ###################
    place $top.tLa53 \
        -in $top -x 0 -y 0 -width 800 -height 90 -anchor nw \
        -bordermode ignore 
    place $top.tLa53.tEn54 \
        -in $top.tLa53 -x 20 -y 30 -width 50 -height 36 -anchor nw \
        -bordermode ignore 
    place $top.tLa53.tEn55 \
        -in $top.tLa53 -x 250 -y 30 -width 50 -height 36 -anchor nw \
        -bordermode ignore 
    place $top.tLa53.tEn56 \
        -in $top.tLa53 -x 490 -y 30 -width 60 -height 36 -anchor nw \
        -bordermode ignore 
    place $top.tEn57 \
        -in $top -x 260 -y -30 -anchor nw -bordermode ignore 
    place $top.tLa58 \
        -in $top -x 0 -y 90 -width 340 -height 35 -anchor nw \
        -bordermode ignore 
    place $top.tLa61 \
        -in $top -x 340 -y 90 -width 460 -height 35 -anchor nw \
        -bordermode ignore 

    vTcl:FireEvent $base <<Ready>>
}

#############################################################################
## Binding tag:  _TopLevel

bind "_TopLevel" <<Create>> {
    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
}
bind "_TopLevel" <<DeleteWindow>> {
    if {[set ::%W::_modal]} {
                vTcl:Toplevel:WidgetProc %W endmodal
            } else {
                destroy %W; if {$_topcount == 0} {exit}
            }
}
bind "_TopLevel" <Destroy> {
    if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
}

Window show .
Window show .top36

