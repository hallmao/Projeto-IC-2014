#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3
# In conjunction with Tcl version 8.6
#    Jul 07, 2014 09:27:59 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import v05_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('EDO_Solver')
    root.geometry('800x600+1791+333')
    w = EDO_Solver (root)
    v05_support.init(root, w)
    root.mainloop()

w = None
def create_EDO_Solver (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('EDO_Solver')
    w.geometry('800x600+1791+333')
    w_win = EDO_Solver (w)
    v05_support.init(w, w_win, param)
    return w_win

def destroy_EDO_Solver ():
    global w
    w.destroy()
    w = None


class EDO_Solver:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family Arial -size 16 -weight bold -slant roman  " + \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(relief="sunken")
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.menubar = Menu(master,bg='#9ebdd8',fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.languages = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.languages,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Languages")
        self.languages.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="English")
        self.languages.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Portuguese")
        self.languages.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Spanish")
        self.representation = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.representation,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Representation")
        self.representation.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Leibniz")
        self.representation.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Line")
        self.representation.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Newton")
        self.representation.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="Heavside")
        self.decimal = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.decimal,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Decimal")
        self.decimal.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="2 Digits")
        self.decimal.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="3 Digits")
        self.decimal.add_radiobutton(
                value="NewRadio",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v05_support.TODO,
                foreground="#000000",
                label="4 Digits")


        self.title_label = Label (master)
        self.title_label.place(relx=0.0,rely=0.0,height=22,width=800)
        self.title_label.configure(background="#86a6bf")
        self.title_label.configure(font=font10)
        self.title_label.configure(foreground="#000000")
        self.title_label.configure(relief=RAISED)
        self.title_label.configure(text='''Linear Differential Equation with  Constant Coefficients Solver''')
        self.title_label.configure(width=800)

        self.Label2 = Label (master)
        self.Label2.place(relx=0.0,rely=0.03,height=112,width=800)
        self.Label2.configure(background="#86a6bf")
        self.Label2.configure(borderwidth="3")
        self.Label2.configure(disabledforeground="#8ba3a1")
        self.Label2.configure(foreground="#000000")
        self._img1 = PhotoImage(file="images/Leibniz_order2_notation.gif")
        self.Label2.configure(image=self._img1)
        self.Label2.configure(relief=SUNKEN)
        self.Label2.configure(text='''Label''')
        self.Label2.configure(width=800)

        self.Entry2 = Entry (master)
        self.Entry2.place(relx=0.31,rely=0.1,relheight=0.06,relwidth=0.07)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(width=52)

        self.Entry1 = Entry (master)
        self.Entry1.place(relx=0.03,rely=0.1,relheight=0.06,relwidth=0.07)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=52)

        self.Entry3 = Entry (master)
        self.Entry3.place(relx=0.61,rely=0.1,relheight=0.06,relwidth=0.07)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(width=52)

        self.TLabel2 = ttk.Label (master)
        self.TLabel2.place(relx=0.0,rely=0.22,height=30,width=272)
        self.TLabel2.configure(background="#86a6bf")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(borderwidth="2")
        self.TLabel2.configure(relief=RAISED)
        self.TLabel2.configure(text='''Init.Conditions: y'(0) =          y(0) =''')
        self.TLabel2.configure(width=272)

        self.Entry4 = Entry (master)
        self.Entry4.place(relx=0.19,rely=0.22,relheight=0.05,relwidth=0.04)
        self.Entry4.configure(background="white")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(width=32)

        self.Entry5 = Entry (master)
        self.Entry5.place(relx=0.29,rely=0.22,relheight=0.05,relwidth=0.04)
        self.Entry5.configure(background="white")
        self.Entry5.configure(font="TkFixedFont")
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(insertbackground="black")
        self.Entry5.configure(width=32)

        self.TLabel3 = ttk.Label (master)
        self.TLabel3.place(relx=0.34,rely=0.22,height=30,width=529)
        self.TLabel3.configure(background="#86a6bf")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(borderwidth="2")
        self.TLabel3.configure(relief=RAISED)
        self.TLabel3.configure(text='''Input x(t) =''')
        self.TLabel3.configure(width=529)

        self.TEntry1 = ttk.Entry (master)
        self.TEntry1.place(relx=0.45,rely=0.22,relheight=0.04,relwidth=0.54)
        self.TEntry1.configure(width=430)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.style.configure('TNotebook.Tab',background=_bgcolor)
        self.style.configure('TNotebook.Tab',foreground=_fgcolor)
        self.style.map('TNotebook.Tab',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(master)
        self.TNotebook1.place(relx=0.0,rely=0.27,relheight=0.73,relwidth=1.0)
        self.TNotebook1.configure(width=804)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_pg0 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg0, padding=3)
        self.TNotebook1.tab(0, text="Solution Log",underline="-1",)
        self.TNotebook1_pg1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg1, padding=3)
        self.TNotebook1.tab(1, text="Plot",underline="-1",)





if __name__ == '__main__':
    vp_start_gui()



