#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3
# In conjunction with Tcl version 8.6
#    Jul 10, 2014 11:53:01 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import v04_7_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('EDO_Solver')
    root.geometry('800x600+142+81')
    w = EDO_Solver (root)
    v04_7_support.init(root, w)
    root.mainloop()

w = None
def create_EDO_Solver (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('EDO_Solver')
    w.geometry('800x600+142+81')
    w_win = EDO_Solver (w)
    v04_7_support.init(w, w_win, param)
    return w_win

def destroy_EDO_Solver ():
    global w
    w.destroy()
    w = None


class EDO_Solver:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family Arial -size 18 -weight normal -slant roman  " + \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.EDO_viewer = Label (master)
        self.EDO_viewer.place(relx=0.0,rely=0.0,height=100,width=800)
        self.EDO_viewer.configure(activebackground="white")
        self.EDO_viewer.configure(activeforeground="black")
        self.EDO_viewer.configure(anchor=S)
        self.EDO_viewer.configure(background="white")
        self.EDO_viewer.configure(borderwidth="5")
        self.EDO_viewer.configure(foreground="#000000")
        self.EDO_viewer.configure(highlightbackground="#d9d9d9")
        self.EDO_viewer.configure(highlightcolor="black")
        self._img1 = PhotoImage(file="images/Newton_order5.gif")
        self.EDO_viewer.configure(image=self._img1)
        self.EDO_viewer.configure(relief=RIDGE)
        self.EDO_viewer.configure(text='''Diff Equation Here''')
        self.EDO_viewer.configure(width=800)

        self.Label2 = Label (master)
        self.Label2.place(relx=0.0,rely=0.17,height=82,width=310)
        self.Label2.configure(activebackground="white")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor=NW)
        self.Label2.configure(background="white")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self._img1 = PhotoImage(file="images/init_conditions.gif")
        self.Label2.configure(image=self._img1)
        self.Label2.configure(relief=RIDGE)
        self.Label2.configure(text='''Init.Conditions''')

        self.Label3 = Label (master)
        self.Label3.place(relx=0.39,rely=0.17,height=82,width=490)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor=W)
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(font=font10)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief=RIDGE)
        self.Label3.configure(text='''Input x(t) =''')

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.idioma = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.idioma,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Idioma")
        self.idioma.add_radiobutton(
                value="Espanhol",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Espanhol")
        self.idioma.add_radiobutton(
                value="Inglês",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Inglês")
        self.idioma.add_radiobutton(
                value="Português",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Português")
        self.notacao = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.notacao,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Notacao")
        self.notacao.add_radiobutton(
                value="Linha",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Linha")
        self.notacao.add_radiobutton(
                value="Leibniz",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Leibniz")
        self.notacao.add_radiobutton(
                value="Newton",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Newton")
        self.notacao.add_radiobutton(
                value="Heavside",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="Heavside")
        self.digitosfracionarios = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.digitosfracionarios,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="DigitosFracionarios")
        self.digitosfracionarios.add_radiobutton(
                value="2 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="2 digitos")
        self.digitosfracionarios.add_radiobutton(
                value="3 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="3 digitos")
        self.digitosfracionarios.add_radiobutton(
                value="4 digitos",
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=v04_7_support.TODO,
                foreground="#000000",
                label="4 digitos")


        self.plotOptions_frame = Frame (master)
        self.plotOptions_frame.place(relx=0.0,rely=0.93,relheight=0.11
                ,relwidth=1.01)
        self.plotOptions_frame.configure(relief=RIDGE)
        self.plotOptions_frame.configure(borderwidth="3")
        self.plotOptions_frame.configure(relief=RIDGE)
        self.plotOptions_frame.configure(background="white")
        self.plotOptions_frame.configure(highlightbackground="#d9d9d9")
        self.plotOptions_frame.configure(highlightcolor="black")
        self.plotOptions_frame.configure(width=805)

        self.style.configure('TNotebook.Tab',background=_bgcolor)
        self.style.configure('TNotebook.Tab',foreground=_fgcolor)
        self.style.map('TNotebook.Tab',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.Abas = ttk.Notebook(master)
        self.Abas.place(relx=0.0,rely=0.37,relheight=0.62,relwidth=1.0)
        self.Abas.configure(width=804)
        self.Abas.configure(takefocus="")
        self.Abas_pg0 = ttk.Frame(self.Abas)
        self.Abas.add(self.Abas_pg0, padding=3)
        self.Abas.tab(0, text="Relatorio",underline="-1",)
        self.Abas_pg1 = ttk.Frame(self.Abas)
        self.Abas.add(self.Abas_pg1, padding=3)
        self.Abas.tab(1, text="Gráfico",underline="-1",)

        self.Output_relatorio = Message (self.Abas_pg0)
        self.Output_relatorio.place(relx=0.0,rely=0.0,relheight=1.01
                ,relwidth=1.0)
        self.Output_relatorio.configure(background="white")
        self.Output_relatorio.configure(foreground="#000000")
        self.Output_relatorio.configure(highlightbackground="#d9d9d9")
        self.Output_relatorio.configure(highlightcolor="black")
        self.Output_relatorio.configure(width=747)

        self.output_plots = Frame (self.Abas_pg1)
        self.output_plots.place(relx=0.0,rely=0.0,relheight=0.85,relwidth=0.94)
        self.output_plots.configure(relief=GROOVE)
        self.output_plots.configure(borderwidth="2")
        self.output_plots.configure(relief=GROOVE)
        self.output_plots.configure(background="White")
        self.output_plots.configure(highlightbackground="#d9d9d9")
        self.output_plots.configure(highlightcolor="black")
        self.output_plots.configure(width=755)

        self.Entry1 = Entry (master)
        self.Entry1.place(relx=0.03,rely=0.1,relheight=0.06,relwidth=0.05)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(takefocus="0")
        self.Entry1.configure(width=42)

        self.Entry2 = Entry (master)
        self.Entry2.place(relx=0.18,rely=0.1,relheight=0.06,relwidth=0.05)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(takefocus="0")
        self.Entry2.configure(width=42)

        self.Entry7 = Entry (master)
        self.Entry7.place(relx=0.13,rely=-0.02,relheight=0.05,relwidth=0.19)
        self.Entry7.configure(background="white")
        self.Entry7.configure(font="TkFixedFont")
        self.Entry7.configure(foreground="#000000")
        self.Entry7.configure(insertbackground="black")
        self.Entry7.configure(takefocus="0")





if __name__ == '__main__':
    vp_start_gui()



