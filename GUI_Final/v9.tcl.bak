#############################################################################
# Generated by PAGE version 4.3
# in conjunction with Tcl version 8.6
#    Jul 14, 2014 03:11:22 PM




#############################################################################
## vTcl Code to Load Stock Images


if {![info exist vTcl(sourcing)]} {
#############################################################################
## Procedure:  vTcl:rename

proc ::vTcl:rename {name} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    regsub -all "\\." $name "_" ret
    regsub -all "\\-" $ret "_" ret
    regsub -all " " $ret "_" ret
    regsub -all "/" $ret "__" ret
    regsub -all "::" $ret "__" ret

    return [string tolower $ret]
}

#############################################################################
## Procedure:  vTcl:image:create_new_image

proc ::vTcl:image:create_new_image {filename {description {no description}} {type {}} {data {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    # Does the image already exist?
    if {[info exists ::vTcl(images,files)]} {
        if {[lsearch -exact $::vTcl(images,files) $filename] > -1} { return }
    }
    if {![info exists ::vTcl(sourcing)] && [string length $data] > 0} {
        set object [image create  [vTcl:image:get_creation_type $filename]  -data $data]
    } else {
        # Wait a minute... Does the file actually exist?
        if {! [file exists $filename] } {
            # Try current directory
            set script [file dirname [info script]]
            set filename [file join $script [file tail $filename] ]
        }

        if {![file exists $filename]} {
            set description "file not found!"
            ## will add 'broken image' again when img is fixed, for
            ## now create empty
            set object [image create photo -width 1 -height 1]
        } else {
            set object [image create  [vTcl:image:get_creation_type $filename]  -file $filename]
        }
    }

    set reference [vTcl:rename $filename]
    set ::vTcl(images,$reference,image)       $object
    set ::vTcl(images,$reference,description) $description
    set ::vTcl(images,$reference,type)        $type
    set ::vTcl(images,filename,$object)       $filename

    lappend ::vTcl(images,files) $filename
    lappend ::vTcl(images,$type) $object
    set ::vTcl(imagefile,$object) $filename   ;# Rozen
    # return image name in case caller might want it
    return $object
}

#############################################################################
## Procedure:  vTcl:image:get_image

proc ::vTcl:image:get_image {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    set reference [vTcl:rename $filename]

    # Let's do some checking first
    if {![info exists ::vTcl(images,$reference,image)]} {
        # Well, the path may be wrong; in that case check
        # only the filename instead, without the path.

        set imageTail [file tail $filename]

        foreach oneFile $::vTcl(images,files) {
            if {[file tail $oneFile] == $imageTail} {
                set reference [vTcl:rename $oneFile]
                break
            }
        }
    }
    # Rozen. There follows a hack in case one wants to rerun a tcl
    # file which contains a file name where an image is expected.
    if {![info exists ::vTcl(images,$reference,image)]} {
        set ::vTcl(images,$reference,image)  [vTcl:image:create_new_image $filename]
    }
    return $::vTcl(images,$reference,image)
}

#############################################################################
## Procedure:  vTcl:image:get_creation_type

proc ::vTcl:image:get_creation_type {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    switch [string tolower [file extension $filename]] {
        .ppm -
        .jpg -
        .bmp -
        .gif    {return photo}
        .xbm    {return bitmap}
        default {return photo}
    }
}

foreach img {


            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

}
#############################################################################
## vTcl Code to Load User Images

catch {package require Img}

foreach img {

        {{$[pwd]/Leibniz_im.gif} {user image} user {}}

            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

set vTcl(actual_gui_bg) #d9d9d9
set vTcl(actual_gui_fg) #000000
set vTcl(actual_gui_menu_bg) #d9d9d9
set vTcl(actual_gui_menu_fg) #000000
set vTcl(complement_color) #d9d9d9
set vTcl(analog_color_p) #d9d9d9
set vTcl(analog_color_m) #d9d9d9
set vTcl(active_fg) #111111
#############################################################################
#############################################################################
# vTcl Code to Load User Fonts

vTcl:font:add_font \
    "-family {Al Nile} -size 13 -weight bold -slant roman -underline 0 -overstrike 0" \
    user \
    vTcl:font10
#################################
#LIBRARY PROCEDURES
#


if {[info exists vTcl(sourcing)]} {

proc vTcl:project:info {} {
    set base .top36
    namespace eval ::widgets::$base {
        set set,origin 1
        set set,size 1
        set runvisible 1
    }
    set site_3_0 $base.m39
    set site_3_0 $base.m39
    set site_3_0 $base.m39
    set site_4_0 .top36.tNo49.pg0 
    set site_4_0 $site_4_0
    set site_4_1 .top36.tNo49.pg1 
    set site_4_0 $site_4_1
    set site_4_2 .top36.tNo49.pg2 
    set site_4_0 $site_4_2
    namespace eval ::widgets_bindings {
        set tagslist _TopLevel
    }
    namespace eval ::vTcl::modules::main {
        set procs {
        }
        set compounds {
        }
        set projectType single
    }
}
}

#################################
# USER DEFINED PROCEDURES
#

#################################
# GENERATED GUI PROCEDURES
#

proc vTclWindow. {base} {
    if {$base == ""} {
        set base .
    }
    ###################
    # CREATING WIDGETS
    ###################
    wm focusmodel $top passive
    wm geometry $top 1x1+5+27; update
    wm maxsize $top 1280 703
    wm minsize $top 72 15
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm withdraw $top
    wm title $top "page.tcl"
    bindtags $top "$top Page.tcl all"
    ###################
    # SETTING GEOMETRY
    ###################

    vTcl:FireEvent $base <<Ready>>
}

proc vTclWindow.top36 {base} {
    if {$base == ""} {
        set base .top36
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl:toplevel $top -class Toplevel \
        -menu "$top.m39" -background {#d9d9d9} 
    wm focusmodel $top passive
    wm geometry $top 1024x706+124+99; update
    wm maxsize $top 1024 768
    wm minsize $top 72 15
    wm overrideredirect $top 0
    wm resizable $top 0 0
    wm deiconify $top
    wm title $top "EDO Solver"
    vTcl:DefineAlias "$top" "Solver_main_window" vTcl:Toplevel:WidgetProc "" 1
    bindtags $top "$top Toplevel all _TopLevel"
    label $top.lab38 \
        -anchor nw -background white -borderwidth 0 -font font10 \
        -foreground {#000000} \
        -image [vTcl:image:get_image [file join / Users Michael Desktop {Projeto IC 2014} GUI_Final Leibniz_im.gif]] \
        -relief ridge -text Texto.Aqui -width 1030 
    vTcl:DefineAlias "$top.lab38" "EDO_image_notacao" vTcl:WidgetProc "Solver_main_window" 1
    menu $top.m39 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -font TkMenuFont -foreground {#000000} \
        -tearoff 0 
    $top.m39 add cascade \
        -activebackground {#d9d9d9} -activeforeground {#111111} \
        -background {#d9d9d9} -command {} -font TkMenuFont \
        -foreground {#000000} -label Idiomas -state disabled 
    set site_3_0 $top.m39
    menu $site_3_0.men40 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men40 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Português 
    $site_3_0.men40 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Espanhol 
    $site_3_0.men40 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Inglês 
    $top.m39 add cascade \
        -activebackground {#d9d9d9} -activeforeground {#111111} \
        -background {#d9d9d9} -command {} -font TkMenuFont \
        -foreground {#000000} -label Notacao -state normal 
    set site_3_0 $top.m39
    menu $site_3_0.men41 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men41 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Newton 
    $site_3_0.men41 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Leibniz 
    $site_3_0.men41 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Heaviside 
    $site_3_0.men41 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label Lagrange 
    $top.m39 add cascade \
        -activebackground {#d9d9d9} -activeforeground {#111111} \
        -background {#d9d9d9} -command {} -font TkMenuFont \
        -foreground {#000000} -label DigitosDecimais -state disabled 
    set site_3_0 $top.m39
    menu $site_3_0.men43 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font menu -foreground black -tearoff 0 
    $site_3_0.men43 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {2 Digitos} 
    $site_3_0.men43 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {3 Digitos} 
    $site_3_0.men43 add radiobutton \
        -variable selectedButton -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command TODO \
        -font TkMenuFont -foreground {#000000} -label {4 Digitos} 
    frame $top.fra45 \
        -borderwidth 4 -relief ridge -background white -height 35 -width 1025 
    vTcl:DefineAlias "$top.fra45" "Frame1" vTcl:WidgetProc "Solver_main_window" 1
    label $top.lab46 \
        -anchor w -background white -foreground {#000000} -relief ridge \
        -text {Conds Iniciais} 
    vTcl:DefineAlias "$top.lab46" "Conds_iniciais_label" vTcl:WidgetProc "Solver_main_window" 1
    label $top.lab47 \
        -anchor w -background white -foreground {#000000} -relief ridge \
        -text {Entrada x(t) = } 
    vTcl:DefineAlias "$top.lab47" "Label3" vTcl:WidgetProc "Solver_main_window" 1
    ttk::style configure TNotebook -background #d9d9d9
    ttk::style configure TNotebook.Tab -background #d9d9d9
    ttk::style configure TNotebook.Tab -foreground #000000
    ttk::style configure TNotebook.Tab -font TkDefaultFont
    ttk::style map TNotebook.Tab -background [list disabled #d9d9d9 selected #d9d9d9]
    ttk::notebook $top.tNo49 \
        -width 1025 -height 520 -takefocus {} 
    vTcl:DefineAlias "$top.tNo49" "TNotebook1" vTcl:WidgetProc "Solver_main_window" 1
    frame .top36.tNo49.pg0 -background #d9d9d9
    $top.tNo49 add .top36.tNo49.pg0 \
        -padding 0 -sticky nsew -state normal -text {Representação Algébrica} \
        -image {} -compound center -underline -1 
    set site_4_0  $top.tNo49.pg0
    label $site_4_0.lab50 \
        -background white -foreground {#000000} -text Label 
    vTcl:DefineAlias "$site_4_0.lab50" "Latex" vTcl:WidgetProc "Solver_main_window" 1
    place $site_4_0.lab50 \
        -in $site_4_0 -x 0 -y 0 -width 970 -height 472 -anchor nw \
        -bordermode ignore 
    frame .top36.tNo49.pg1 -background #d9d9d9
    $top.tNo49 add .top36.tNo49.pg1 \
        -padding 0 -sticky nsew -state normal -text Gráficos -image {} \
        -compound center -underline -1 
    set site_4_1  $top.tNo49.pg1
    label $site_4_1.lab51 \
        -background white -foreground {#000000} -text Label 
    vTcl:DefineAlias "$site_4_1.lab51" "Plots" vTcl:WidgetProc "Solver_main_window" 1
    place $site_4_1.lab51 \
        -in $site_4_1 -x 0 -y 0 -width 970 -height 482 -anchor nw \
        -bordermode ignore 
    frame .top36.tNo49.pg2 -background #d9d9d9
    $top.tNo49 add .top36.tNo49.pg2 \
        -padding 0 -sticky nsew -state normal -text {Log Texto} -image {} \
        -compound center -underline -1 
    set site_4_2  $top.tNo49.pg2
    text $site_4_2.tex52 \
        -background white -font TkTextFont -foreground black -height 478 \
        -highlightbackground {#d9d9d9} -highlightcolor black \
        -insertbackground black -selectbackground {#c4c4c4} \
        -selectforeground black -width 978 
    .top36.tNo49.pg2.tex52 configure -font TkTextFont
    .top36.tNo49.pg2.tex52 insert end text
    vTcl:DefineAlias "$site_4_2.tex52" "Saida_log_texto" vTcl:WidgetProc "Solver_main_window" 1
    place $site_4_2.tex52 \
        -in $site_4_2 -x 0 -y 0 -width 978 -height 478 -anchor nw \
        -bordermode ignore 
    entry $top.ent53 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black -state disabled \
        -textvariable '0' 
    vTcl:DefineAlias "$top.ent53" "in_a5" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent54 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black -state disabled \
        -textvariable '0' 
    vTcl:DefineAlias "$top.ent54" "Entry2" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent55 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black -state disabled \
        -textvariable '0' 
    vTcl:DefineAlias "$top.ent55" "Entry3" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent56 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black 
    vTcl:DefineAlias "$top.ent56" "Entry4" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent57 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black 
    vTcl:DefineAlias "$top.ent57" "Entry5" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent58 \
        -background white -borderwidth 0 -font TkFixedFont \
        -foreground {#000000} -insertbackground black 
    vTcl:DefineAlias "$top.ent58" "Entry6" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent59 \
        -background white -font TkFixedFont -foreground {#000000} \
        -insertbackground black 
    vTcl:DefineAlias "$top.ent59" "Entry7" vTcl:WidgetProc "Solver_main_window" 1
    entry $top.ent60 \
        -background white -font TkFixedFont -foreground {#000000} \
        -insertbackground black 
    vTcl:DefineAlias "$top.ent60" "Entry8" vTcl:WidgetProc "Solver_main_window" 1
    ttk::entry $top.tEn61 \
        -foreground {} -background {} -takefocus {} -cursor ibeam 
    vTcl:DefineAlias "$top.tEn61" "xT_entry" vTcl:WidgetProc "Solver_main_window" 1
    ###################
    # SETTING GEOMETRY
    ###################
    place $top.lab38 \
        -in $top -x 0 -y 0 -width 1030 -height 80 -anchor nw \
        -bordermode ignore 
    place $top.fra45 \
        -in $top -x 0 -y 670 -width 1025 -height 35 -anchor nw \
        -bordermode ignore 
    place $top.lab46 \
        -in $top -x 0 -y 80 -width 500 -height 52 -anchor nw \
        -bordermode ignore 
    place $top.lab47 \
        -in $top -x 500 -y 80 -width 520 -height 52 -anchor nw \
        -bordermode ignore 
    place $top.tNo49 \
        -in $top -x 0 -y 140 -width 1025 -height 520 -anchor nw \
        -bordermode ignore 
    place $top.ent53 \
        -in $top -x 0 -y 10 -width 42 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent54 \
        -in $top -x 170 -y 10 -width 52 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent55 \
        -in $top -x 340 -y 10 -width 52 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent56 \
        -in $top -x 510 -y 20 -width 42 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent57 \
        -in $top -x 680 -y 10 -width 32 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent58 \
        -in $top -x 830 -y 20 -width 52 -height 47 -anchor nw \
        -bordermode ignore 
    place $top.ent59 \
        -in $top -x 260 -y 90 -width 42 -height 27 -anchor nw \
        -bordermode ignore 
    place $top.ent60 \
        -in $top -x 140 -y 90 -width 42 -height 27 -anchor nw \
        -bordermode ignore 
    place $top.tEn61 \
        -in $top -x 600 -y 90 -width 300 -height 26 -anchor nw \
        -bordermode ignore 

    vTcl:FireEvent $base <<Ready>>
}

#############################################################################
## Binding tag:  _TopLevel

bind "_TopLevel" <<Create>> {
    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
}
bind "_TopLevel" <<DeleteWindow>> {
    if {[set ::%W::_modal]} {
                vTcl:Toplevel:WidgetProc %W endmodal
            } else {
                destroy %W; if {$_topcount == 0} {exit}
            }
}
bind "_TopLevel" <Destroy> {
    if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
}

Window show .
Window show .top36

